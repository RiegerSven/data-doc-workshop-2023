# Import data

```{r}
#| label: read-data-imp
#| echo: false
#| warning: false

exDat <- readRDS("exampleDat.RDS")

```

This section provides an introduction to importing (and exporting) data sets into `R`. 

```{css, echo=FALSE}
.vScrollbar {
  max-height: 250px;
  overflow-y: scroll;
}
```

## Import (or export) data sets

In `R` data sets are usually stored as `data.frame` objects (see also the section [Data Structures](intro-r-rstudio.qmd#data-structure)). There are other object types for data sets such as `tibble` from the `tibble` package [@R-tibble] or `data.table` from the `data.table` package [@R-data.table] which are more efficient, especially when it comes to (very) large data sets (see e.g., [Chapter 10](https://r4ds.had.co.nz/tibbles.html) of [R for Data Science](https://r4ds.had.co.nz/) and the [vignette](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html) of the `data.table` package).

### Data frames

Data sets can come in many different file formats. For example, `.txt`, `.csv` files, or `.sav` ([SPSS](https://www.ibm.com/spss)), `dta` ([Stata](https://www.stata.com/)), `.sas7bdat` ([SAS](https://www.sas.com/en_us/home.html)) files.

To import e.g., `.csv` or `.txt` files, `R` offers a couple of functions that deal with these formats:

- `utils::read.table`: Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.
    - `utils::read.csv` or `utils::read.csv2`^[see also here: <https://stackoverflow.com/questions/22970091/difference-between-read-csv-and-read-csv2-in-r>]
    - `utils::read.delim` or `utils::read.delim2` 

- `base::readLines`: Read some or all text lines from a connection.

- ...

When it comes to other (software specific) formats, you need additional packages e.g., `foreign` [@R-foreign] or `haven` [@R-haven]. In the following, we first export the `exDat` data set to a `.sav` file using the `write.foreign` function from the `foreign` package.

To import the SPSS data sets (`.sav` file), we may use the `read.spss` function from the `foreign` package [@R-foreign]. There are a couple of default arguments which you (likely) want to change:

- `use.value.labels`: logical: convert variables with value labels into R factors with those levels? (default is `TRUE` switch to `FALSE`)
- `to.data.frame`logical: return a data frame? (default is `FALSE` switch to `TRUE`)
- `use.missings`: logical: should information on user-defined missing values be used to set the corresponding values to NA?

```{r}
#| label: demo-read-spss
#| eval: false
#| code-fold: false

exDatImpforeign <- foreign::read.spss("file-to-path-with-.sav-file",
                                      use.value.labels = FALSE,
                                      to.data.frame = TRUE,
                                      use.missings = TRUE)

```

::: {.callout-note collapse="true" appearance="simple"}
## Exporting dataframes

To export data to a file, you can use the `base::write` function(s):

- `utils::write.table`
- `utils::write.csv` or `utils::write.csv2`
- ...

Again, when it comes to software-specific file formats you need additional packages such as `foreign` [@R-foreign] or `haven` [@R-haven]:

- `haven::write_sav`
- `foreign::write.foreign`
- ...


In the following, the use of the `write.foreign` function is displayed:

```{r}
#| label: demo-write-foreign
#| eval: false
#| code-fold: false 


getwd()
codefile <- tempfile()

foreign::write.foreign(exDat,
                       "exDat.sav",
                       codefile = codefile,
                       package = c("SPSS"))

unlink(codefile)
```

Note that there are a couple of further steps necessary to get a working `.sav` file. We recommend using the `haven` [@R-haven] package (see [below]()), at least when it comes to exporting data sets.

::: 

### Tibbles

The tibble package is part of the `tidyverse`^[for more see the section on [Base R ~~vs.~~ & tidyverse](intro-r-rstudio.qmd#baseR-tidyverse).] [@R-tidyverse].

First, check the class of the example data set `exDat`.

```{r}
#| label: class-exDat
#| code-fold: false
class(exDat)
```
The `as_tibble` function from the `tibble` package [@R-tibble] turns an existing object (a data frame or matrix) into `tibble` which is a `data.frame` variant (with nice defaults)  and `class` `tbl_df` (see `?tibble::as_tibble`).


```{r}
#| label: demo-as-tibble
#| code-fold: false
exDatTib <- tibble::as_tibble(exDat)
class(exDatTib)
```

The `write_sav` function from the `haven` package [@R-haven] can also be used to export data sets. Before exporting the data, you may want to check your working directory with the `getwd()` function.

```{r}
#| label: demo-write-sav
#| eval: false
#| code-fold: false 


getwd()
haven::write_sav(exDat, "exDat.sav")

```

To import the data set, we use the `read_sav` function from the `haven` package.

```{r}
#| label: demo-read-sav
#| eval: false
#| code-fold: false

exDatImpTest <- haven::read_sav("exDat.sav")

```

Note that the `read_sav` returns a `tibble`, `data.frame` variant (with nice defaults).

For more see <https://tibble.tidyverse.org/> and [Chapter 10](https://r4ds.had.co.nz/tibbles.html) of [R for Data Science](https://r4ds.had.co.nz/).